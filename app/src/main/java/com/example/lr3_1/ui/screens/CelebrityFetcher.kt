package com.example.lr3_1.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.lr3_1.model.Celebrity
import com.example.lr3_1.ui.theme.AppTypography
import kotlinx.coroutines.launch

/**
 * –≠–∫—Ä–∞–Ω –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—å".
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
 * - —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏;
 * - –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∏–º–µ–Ω–∏;
 * - –∫–Ω–æ–ø–∫–∏ "Give up" –∏ "Next";
 * - –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (–ø—Ä–∞–≤–∏–ª—å–Ω–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ) —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç –∏ Snackbar.
 *
 * @param celebrities —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π.
 * @param onNextCelebrity callback –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏).
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CelebrityGameScreen(
    celebrities: List<Celebrity>,
    onNextCelebrity: () -> Unit
) {
    // –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—å
    var currentCelebrity by remember { mutableStateOf<Celebrity?>(celebrities.randomOrNull()) }

    // –í–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º—è
    var userGuess by remember { mutableStateOf("") }

    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    var showAnswer by remember { mutableStateOf(false) }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" –∏–ª–∏ "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑"
    var feedback by remember { mutableStateOf("") }

    // –î–ª—è –ø–æ–∫–∞–∑–∞ Snackbar
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }

    // –û—Å–Ω–æ–≤–Ω–∞—è Scaffold —Å –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª—å—é –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
    Scaffold(
        snackbarHost = { SnackbarHost(snackbarHostState) },
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Guess the Celebrity",
                        style = AppTypography.titleLarge
                    )
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                )
            )
        },
        containerColor = MaterialTheme.colorScheme.background
    ) { padding ->

        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(24.dp),
            contentAlignment = Alignment.Center
        ) {
            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—å
            if (currentCelebrity == null) {
                Text(
                    text = "No celebrities found üò¢",
                    style = AppTypography.bodyLarge,
                    color = MaterialTheme.colorScheme.onBackground
                )
            } else {
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(24.dp)
                ) {
                    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —á–µ—Ä–µ–∑ Coil
                    AsyncImage(
                        model = currentCelebrity!!.imageUrl,
                        contentDescription = currentCelebrity!!.name,
                        modifier = Modifier
                            .size(200.dp)
                            .align(Alignment.CenterHorizontally)
                    )

                    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
                    OutlinedTextField(
                        value = userGuess,
                        onValueChange = { userGuess = it },
                        label = { Text("Enter celebrity name") },
                        singleLine = true,
                        textStyle = AppTypography.bodyLarge,
                        keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
                        keyboardActions = KeyboardActions(
                            onDone = {
                                if (userGuess.isNotBlank()) {
                                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
                                    if (userGuess.equals(currentCelebrity!!.name, ignoreCase = true)) {
                                        feedback = "üéâ Correct!"
                                        scope.launch { snackbarHostState.showSnackbar("Correct!") }
                                    } else {
                                        feedback = "‚ùå Try again!"
                                        scope.launch { snackbarHostState.showSnackbar("Wrong guess") }
                                    }
                                }
                            }
                        ),
                        modifier = Modifier.fillMaxWidth()
                    )

                    // –í—ã–≤–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                    if (feedback.isNotEmpty()) {
                        Text(
                            text = feedback,
                            style = AppTypography.titleMedium,
                            color = if (feedback.startsWith("üéâ"))
                                MaterialTheme.colorScheme.primary
                            else
                                MaterialTheme.colorScheme.error,
                            textAlign = TextAlign.Center
                        )
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–∞–ª—Å—è
                    if (showAnswer) {
                        Text(
                            text = "Answer: ${currentCelebrity!!.name}",
                            style = AppTypography.titleMedium,
                            color = MaterialTheme.colorScheme.tertiary,
                            textAlign = TextAlign.Center
                        )
                    }

                    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π: "Give up" –∏ "Next"
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                        Button(
                            onClick = {
                                showAnswer = true
                                feedback = ""
                            },
                            colors = ButtonDefaults.buttonColors(
                                containerColor = MaterialTheme.colorScheme.secondaryContainer
                            )
                        ) {
                            Text("Give up", color = MaterialTheme.colorScheme.onSecondaryContainer)
                        }

                        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏
                        Button(
                            onClick = {
                                onNextCelebrity()
                                currentCelebrity = celebrities.randomOrNull()
                                userGuess = ""
                                showAnswer = false
                                feedback = ""
                            },
                            colors = ButtonDefaults.buttonColors(
                                containerColor = MaterialTheme.colorScheme.primary
                            )
                        ) {
                            Text("Next", color = MaterialTheme.colorScheme.onPrimary)
                        }
                    }
                }
            }
        }
    }
}
